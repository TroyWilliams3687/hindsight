# -----------
# SPDX-License-Identifier: MIT
# Copyright (c) 2021 Troy Williams

# uuid       = b642e918-c6ce-11eb-aab5-07c56d07b1c9
# author     = Troy Williams
# email      = troy.williams@bluebill.net
# date       = 2021-06-06
# -----------

# This makefile should be included into the primary makefile when dealing with
# Python repositories that require virtual environments.

# This module will:
# - construct a virtual environment
# - install all requirements.txt files
# - install pretty errors
# - install the local repo package if a setup.py is found (editable)
# - remove the venv folder
# - show properties about the venv
# - show debug information about the environment
# - launch a python interactive shell
# - launch a venv shell

# Simply include this Makefile in another Makefile and add them both to the repository of choice

# -----------
# References

# https://github.com/sio/Makefile.venv
# https://blog.byronjsmith.com/makefile-shortcuts.html
# https://github.com/HariSekhon/DevOps-Bash-tools/blob/master/Makefile.in
# https://github.com/HariSekhon/DevOps-Bash-tools/blob/master/Makefile

# Help file using SED - https://swcarpentry.github.io/make-novice/08-self-doc/index.html

# -----------
# Default Target

# https://www.gnu.org/software/make/manual/html_node/How-Make-Works.html
# https://stackoverflow.com/questions/2057689/how-does-make-app-know-default-target-to-build-if-no-target-is-specified

# NOTE: We would have to override the .DEFAULT_GOAL in the main Makefile, after the include

.DEFAULT_GOAL := help

# -----------
# Assumed Variables

# It is assumed that these variables will be defined in the main Makefile.

# PYPATH?=$(python)

# define the binary to use
# PY?=$(PYPATH)/python3.9

# -----------
# Variables

# The name of the virtual environment to use
VENV=.venv

# The path to the bin folder in the virtual environment. We define this
# so we can use the correct binaries
BIN?=$(VENV)/bin

# Load up any requirements files so we can install them into the venv. Multiple
# paths are supported (space separated)
REQUIREMENTS_TXT?=$(wildcard requirements.txt)

# The install_marker indicates that the .venv was created and initialized by the
# makefile - no need to install things to it again
MARKER=.initialized-with-Makefile.venv

# Attach the venv path so it is searched first, for binaries - If we don't do
# this, then PANDOC won't find any Python based filters
export PATH := $(BIN):$(PATH)

# -----------
# Virtual Environment

$(VENV):
	@echo "Constructing Virtual Environment..."
	$(PY) -m venv $@

	@echo "Upgrading pip, setuptools and wheel..."
	$(BIN)/python -m pip install --upgrade pip setuptools wheel

	@# install the pretty errors module and set it up to format errors globally
	@# for the virtual environment

	@echo "Installing Pretty Errors..."
	@$(BIN)/python -m pip install pretty_errors
	@$(BIN)/python -m pretty_errors -s

	@# `python -m pretty_errors -s` -s to install to the default system
	@# location, in this case .venv @#
	@# https://github.com/onelivesleft/PrettyErrors/blob/master/pretty_errors/__main__.py

	@# NOTE: Running python -m will call the __main__.py module and can do some
	@# wonderful things @# In addition, it ensures the properly paired binaries
	@# are called like pip

	@touch $(VENV)

# -----------
# Virtual Environment (Dependencies)

# Do we have any requirements files? List them and install
ifneq ($(strip $(REQUIREMENTS_TXT)),)
VENV_DEP+=$(REQUIREMENTS_TXT)
endif

# Do we have a setup.py or setup.cfg? That would indicate a package, let's
# install that
ifneq ($(wildcard setup.py),)
VENV_DEP+=setup.py
endif

ifneq ($(wildcard setup.cfg),)
VENV_DEP+=setup.cfg
endif

# -----------
# Virtual Environment - Installation Marker

# Install the requirements and the custom package, if this directory is a custom
# package. It will also write a marker file indicating that the dependencies
# were installed by the makefile

$(VENV)/$(MARKER): $(VENV_DEP) | $(VENV)
ifneq ($(strip $(REQUIREMENTS_TXT)),)
	@echo "Installing Requirements..."
	$(BIN)/pip install $(foreach path,$(REQUIREMENTS_TXT),-r $(path))
endif

# The project does require a stub `setup.py` file that calls setuptools.setup
# () for pip install to work correctly
ifneq ($(wildcard setup.py),)
	@echo "Installing Custom Package..."
	$(BIN)/python -m pip install -e .
endif

	@touch $(VENV)/$(MARKER)

# -----------
# make venv

## make venv - build the virtual environment installing all the dependencies (*requirements.txt, setup.py, setup.cfg)
.PHONY: venv
venv: $(VENV)/$(MARKER)

# -----------
# make show-venv

## make show-venv - Display properties about the venv.
.PHONY: show-venv
show-venv: venv
	@$(BIN)/python -c "import sys; print('Python ' + sys.version.replace('\n',''))"
	@$(BIN)/pip --version
	@echo venv: $(VENV)

# -----------
# make debug-venv

## make debug-venv - Display debugging information about the venv.
.PHONY: debug-venv
debug-venv:
	@$(MAKE) --version
	@$(info PY="$(PY)")
	@$(info REQUIREMENTS_TXT="$(REQUIREMENTS_TXT)")
	@$(info VENV="$(VENV)")
	@$(info VENV_DEP="$(VENV_DEP)")

# -----------
# Interactive Python

## make python - Start an interactive Python shell.
.PHONY: python
python: venv
	@echo "Launching Python Shell..."
	@exec $(BIN)/python

## make shell - Lunch the venv shell.
.PHONY: shell
shell: venv
	@echo "Activating $(VENV)..."
	@bash --rcfile $(BIN)/activate -i

# -----------
# make clean-venv

## make clean-venv - remove the virtual environment only. More often you want 'make remove-venv'.
.PHONY: clean-venv
clean-venv:
	@echo "Removing $(VENV)..."
	@rm -rf $(VENV)

# -----------
# make remove-venv

# Remove the Virtual Environment and clean the cached files

## make remove-venv - Delete the venv and clean out any cached files.
.PHONY: remove-venv
remove-venv: clean-venv
	@echo "Removing Cached Files..."
	@find . -type d -name '*.egg-info' -exec rm -r {} +
	@find . -type d -name __pycache__ -exec rm -r {} +
	@find . -type f -name *.pyc -delete
	@find . -type d -name .pytest_cache -exec rm -r {} +
	@find . -type d -name .ipynb_checkpoints -exec rm -r {} +

# -----------
# make help

# - https://swcarpentry.github.io/make-novice/08-self-doc/index.html use sed to
#   look for double # pattern and use that as the documentation string to print
#   out.

# NOTE: This version uses find to find all makefiles and then feeds them to SED
# to extract the information.

## make help - List the available command descriptions for the Makefile.
.PHONY : help
help : $(wildcard Makefile)
	@echo ""
	@echo "Available Commands:"
	@echo ""
	@find . -name "Makefile*" -exec sed -n 's/^##//p' {} \;
	@echo ""
	@echo "To get started, use '$ make venv'"
