# -----------
# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Troy Williams

# uuid       = 68994168-238e-11ec-811e-5d4d4c500ca4
# author     = Troy Williams
# email      = troy.williams@bluebill.net
# date       = 2021-10-02
# -----------

# This makefile should be included into the primary makefile when dealing with
# Python repositories that require virtual environments.

# This module will:
# - construct a virtual environment
# - install all requirements.txt files
# - install pretty errors
# - install the local repo package if a setup.py is found (editable)
# - remove the venv folder
# - show properties about the venv
# - show debug information about the environment
# - launch a python interactive shell
# - launch a venv shell

# -----------
# Assumptions

# - Python is properly installed
# - Virtualenv is properly installed


# -----------
# References

# https://github.com/sio/Makefile.venv
# https://blog.byronjsmith.com/makefile-shortcuts.html
# https://github.com/HariSekhon/DevOps-Bash-tools/blob/master/Makefile.in
# https://github.com/HariSekhon/DevOps-Bash-tools/blob/master/Makefile

# Help file using SED - https://swcarpentry.github.io/make-novice/08-self-doc/index.html

# -----------
# Variables

# Load up any requirements files so we can install them into the venv. Multiple
# paths are supported (space separated)
REQUIREMENTS_TXT?=$(wildcard *requirements.txt)

# The install_marker indicates that the .venv was created and initialized by the
# makefile - no need to install things to it again
MARKER=.initialized-with-Makefile.venv

# Attach the venv path so it is searched first, for binaries - If we don't do
# this, then PANDOC won't find any Python based filters
export PATH := $(BIN):$(PATH)

# -----------
# Virtual Environment

$(VENV):
	@echo "Constructing Virtual Environment..."
	$(PY) -m venv $@

	@echo "Upgrading pip, setuptools and wheel..."
	$(BIN)/python -m pip install --upgrade pip setuptools wheel

	@# NOTE: Running python -m will call the __main__.py module and can do some
	@# wonderful things
	@# In addition, it ensures the properly paired binaries are called like pip

	@touch $(VENV)

# -----------
# Virtual Environment (Dependencies)

# Do we have any requirements files? List them and install
ifneq ($(strip $(REQUIREMENTS_TXT)),)
VENV_DEP+=$(REQUIREMENTS_TXT)
endif

# Do we have a setup.py or setup.cfg? That would indicate a package, let's
# install that
ifneq ($(wildcard setup.py),)
VENV_DEP+=setup.py
endif

ifneq ($(wildcard setup.cfg),)
VENV_DEP+=setup.cfg
endif

# -----------
# Virtual Environment - Installation Marker

# Install the requirements and the custom package, if this directory is a custom
# package. It will also write a marker file indicating that the dependencies
# were installed by the makefile

$(VENV)/$(MARKER): $(VENV_DEP) | $(VENV)
ifneq ($(strip $(REQUIREMENTS_TXT)),)
	@echo "Installing Requirements..."
	$(BIN)/python -m pip install $(foreach path,$(REQUIREMENTS_TXT),-r $(path))
endif

# The project does require a stub `setup.py` file that calls setuptools.setup
# () for pip install to work correctly
ifneq ($(wildcard setup.py),)
	@echo "Installing Custom Package..."
	$(BIN)/python -m pip install -e .
endif

	@touch $(VENV)/$(MARKER)

# -----------
# make venv

## make venv - build the virtual environment installing all the dependencies (*requirements.txt, setup.py, setup.cfg)
.PHONY: venv
venv: $(VENV)/$(MARKER)

# -----------
# make show-venv

## make show-venv - Display properties about the venv.
.PHONY: show-venv
show-venv: venv
	@$(BIN)/python -c "import sys; print('Python ' + sys.version.replace('\n',''))"
	@$(BIN)/pip --version
	@echo venv: $(VENV)

# -----------
# make debug-venv

## make debug-venv - Display debugging information about the venv.
.PHONY: debug-venv
debug-venv:
	@$(MAKE) --version
	@$(info PY="$(PY)")
	@$(info REQUIREMENTS_TXT="$(REQUIREMENTS_TXT)")
	@$(info VENV="$(VENV)")
	@$(info VENV_DEP="$(VENV_DEP)")

# -----------
# Interactive Python

## make python - Start an interactive Python shell.
.PHONY: python
python: venv
	@echo "Launching Python Shell..."
	@exec $(BIN)/python

## make shell - Lunch the venv shell.
.PHONY: shell
shell: venv
	@echo "Activating $(VENV)..."
	@echo ""
# 	RED='\033[0;31m' # Red
# 	NC='\033[0m' # No Color
	@echo -e "Set an alias in .bashrc -> \033[0;31malias activate=\"source .venv/bin/activate\"\033[0m"
	@bash --rcfile $(BIN)/activate -i

# -----------
# make clean-venv

## make clean-venv - remove the virtual environment only. More often you want 'make remove-venv'.
.PHONY: clean-venv
clean-venv:
	@echo "Removing $(VENV)..."
	@rm -rf $(VENV)

# -----------
# make remove-venv

# Remove the Virtual Environment and clean the cached files

## make remove-venv - Delete the venv and clean out any cached files.
.PHONY: remove-venv
remove-venv: clean-venv
	@echo "Removing Cached Files..."
	@find . -type d -name '*.egg-info' -exec rm -r {} +
	@find . -type d -name __pycache__ -exec rm -r {} +
	@find . -type f -name *.pyc -delete
	@find . -type d -name .pytest_cache -exec rm -r {} +
	@find . -type d -name .ipynb_checkpoints -exec rm -r {} +


